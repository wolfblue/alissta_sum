{"version":3,"sources":["webpack:///src/app/pages/companies/list/list-routing.module.ts","webpack:///src/app/pages/companies/list/list.module.ts","webpack:///src/app/pages/companies/list/list.page.html","webpack:///src/app/pages/companies/list/list.page.ts"],"names":["routes","path","component","ListPageRoutingModule","forChild","imports","exports","ListPageModule","declarations","ListPage","companiesService","storageService","alertService","retrieveCompanies","onSuccess","response","excludeConfirmed","companies","onError","error","header","message","status","showAlert","showLoading","loading","get","session","fetchCompanies","idRegistro","pipe","hideLoading","subscribe","r","e","updatedCompanies","confirmed","filter","u","__confirmed","editables","c","find","Pk_Id_AS_004_Empresas_AMigrar","selector","templateUrl","styleUrls"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;AAKA,QAAMA,MAAM,GAAW,CACrB;AACEC,UAAI,EAAE,EADR;AAEEC,eAAS,EAAE;AAFb,KADqB,CAAvB;;QAWaC,qB;;;;;YAAAA;;;;yBAAAA,qB;AAAqB,O;AAAA,gBAHvB,CAAC,6DAAaC,QAAb,CAAsBJ,MAAtB,CAAD,CAGuB,EAFtB,4DAEsB;;;;0HAArBG,qB,EAAqB;AAAA;AAAA,kBAFtB,4DAEsB;AAAA,O;AAFV,K;;;;;sEAEXA,qB,EAAqB;cAJjC,sDAIiC;eAJxB;AACRE,iBAAO,EAAE,CAAC,6DAAaD,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERM,iBAAO,EAAE,CAAC,4DAAD;AAFD,S;AAIwB,Q;;;;;;;;;;;;;;;;;;AChBlC;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAAA;;QAaaC,c;;;;;YAAAA;;;;yBAAAA,c;AAAc,O;AAAA,gBAHhB,CAAC,4DAAD,EAAe,0DAAf,EAA4B,0DAA5B,EAAyC,0EAAzC,EAAgE,sEAAhE,EAA6E,sEAA7E,CAGgB;;;;0HAAdA,c,EAAc;AAAA,uBAFV,mDAEU;AAFF,kBADb,4DACa,EADC,0DACD,EADc,0DACd,EAD2B,0EAC3B,EADkD,sEAClD,EAD+D,sEAC/D;AAEE,O;AAH4E,K;;;;;sEAG1FA,c,EAAc;cAJ1B,sDAI0B;eAJjB;AACRF,iBAAO,EAAE,CAAC,4DAAD,EAAe,0DAAf,EAA4B,0DAA5B,EAAyC,0EAAzC,EAAgE,sEAAhE,EAA6E,sEAA7E,CADD;AAERG,sBAAY,EAAE,CAAC,mDAAD;AAFN,S;AAIiB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACSjB;;;;;;;;;;;;AAJF;;AAIE;;AACF;;;;;;;;;;AADgB;;AAAA,0FAAuD,yBAAvD,EAAuD,2EAAvD;;;;;;;;;;AAPtB;;AACE;;AACE;;AACE;;;;AAMF;;AACF;;AACF;;;;;;AANQ;;AAAA;;;;;;AAkBR;;AACE;;AACE;;AACA;;AAAI;;AAA6D;;AACjE;;AACF;;AACF;;;;;;;;;;AAKA;;AACE;;AACE;;AACE;;AAAuB;;AAA4B;;AACnD;;AAAuB;;AAA8D;;AACrF;;AAA6C;;AAAgD;;AAC/F;;AACF;;AACF;;;;;;AARiB;;AAGY;;AAAA;;AACA;;AAAA;;AACsB;;AAAA;;;AC/CrD;;;;;QAQaC,Q;AAWX,wBACUC,gBADV,EAEUC,cAFV,EAGUC,YAHV,EAGoC;AAAA;;AAF1B,aAAAF,gBAAA,GAAAA,gBAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACA,aAAAC,YAAA,GAAAA,YAAA;AACN;;;;eAEJ,4BAAgB;AACd,eAAKC,iBAAL;AACD;AAED;;;;;;eAGM,0BAAc;;;;;;;;AACZC,2B,GAAY,SAAZA,SAAY,CAAOC,QAAP;AAAA,2BAAwC;AAAA;AAAA;AAAA;AAAA;AACvC,mCAAM,KAAKC,gBAAL,CAAsBD,QAAtB,CAAN;;AADuC;AACxD,iCAAKE,SADmD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAxC;AAAA,mB;;AAIZC,yB,GAAU,SAAVA,OAAU,CAACC,KAAD,EAAsB;AACpC,wBAAIC,MAAJ;AACA,wBAAIC,OAAJ;;AAEA,wBAAIF,KAAK,YAAY,sEAArB,EAAwC;AACtC,0BAAIA,KAAK,CAACG,MAAN,KAAiB,GAArB,EAA0B;AACxBF,8BAAM,GAAG,WAAT;AACAC,+BAAO,GAAG,gEAAV;AACD,uBAHD,MAGO;AACLD,8BAAM,GAAG,mBAAT;AACAC,+BAAO,GAAG,mDAAV;AACD;AACF,qBARD,MAQO;AACLD,4BAAM,GAAG,eAAT;AACAC,6BAAO,GAAG,sEAAV;AACD;;AAED,yBAAI,CAACT,YAAL,CAAkBW,SAAlB,CAA4BH,MAA5B,EAAoCC,OAApC;AACD,mB;;;AAEe,yBAAM,KAAKT,YAAL,CAAkBY,WAAlB,EAAN;;;AAAVC,yB;;AACU,yBAAM,KAAKd,cAAL,CAAoBe,GAApB,CAAwB,QAAxB,CAAN;;;AAAVC,yB;AAEN,uBAAKjB,gBAAL,CACGkB,cADH,CACkBD,OAAO,CAACE,UAD1B,EAEGC,IAFH,CAEQ,gEAAS;AAAA,2BAAM,KAAI,CAAClB,YAAL,CAAkBmB,WAAlB,CAA8BN,OAA9B,CAAN;AAAA,mBAAT,CAFR,EAGGO,SAHH,CAII,UAAAC,CAAC;AAAA,2BAAInB,SAAS,CAACmB,CAAD,CAAb;AAAA,mBAJL,EAKI,UAAAC,CAAC;AAAA,2BAAIhB,OAAO,CAACgB,CAAD,CAAX;AAAA,mBALL;;;;;;;;AAOD;AAED;;;;;;eAGc,6BAAiB;;;;;iCACN,I;;AAAsB,yBAAM,KAAKxB,gBAAL,CAAsBO,SAA5B;;;;;AAA5B,sCAAWD,gBAAX;;;AAAjB,uBAAKC,S;;;;;;;;AACN;AAED;;;;;;;;;eAMc,0BAAiBA,SAAjB,EAAiC;;;;;;;AACpB,yBAAM,KAAKP,gBAAL,CAAsByB,gBAA5B;;;AAAnBA,kC;AACAC,2B,GAAYD,gBAAgB,CAACE,MAAjB,CAAwB,UAAAC,CAAC;AAAA,2BAAIA,CAAC,CAACC,WAAN;AAAA,mBAAzB,C;AACZC,2B,GAAYvB,SAAS,CAACoB,MAAV,CAAiB,UAAAI,CAAC;AAAA,2BAAI,CAACL,SAAS,CAACM,IAAV,CAAe,UAAAJ,CAAC;AAAA,6BAAIA,CAAC,CAACK,6BAAF,KAAoCF,CAAC,CAACE,6BAA1C;AAAA,qBAAhB,CAAL;AAAA,mBAAlB,C;oDAEXH,S;;;;;;;;AACR;;;;;;;uBAhFU/B,Q,EAAQ,8J,EAAA,uI,EAAA,kJ;AAAA,K;;;YAARA,Q;AAAQ,+B;AAAA,e;AAAA,a;AAAA,u6B;AAAA;AAAA;ADfrB;;AACE;;AACE;;AACE;;AACE;;AACF;;AACA;;AACE;;AAA6D;AAAA;AAAA;;AAA0C;;AACzG;;AACF;;AACF;;AACF;;AAEA;;AAEE;;AAcA;;AACE;;AAAgB;AAAA,mBAAS,IAAAmB,cAAA,EAAT;AAAyB,WAAzB;;AACd;;AACF;;AACF;;AACF;;AAGA;;AAWA;;;;;;AAjCgB;;AAAA,gIAA8C,UAA9C,EAA8C,GAA9C;;;;;;;;;;sECAHnB,Q,EAAQ;cALpB,uDAKoB;eALV;AACTmC,kBAAQ,EAAE,UADD;AAETC,qBAAW,EAAE,kBAFJ;AAGTC,mBAAS,EAAE,CAAC,kBAAD;AAHF,S;AAKU,Q","file":"list-list-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ListPage } from './list.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ListPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ListPageRoutingModule {}\n","import { ScrollingModule } from '@angular/cdk/scrolling';\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { PipesModule } from 'src/app/pipes/pipes.module';\nimport { ListPageRoutingModule } from './list-routing.module';\nimport { ListPage } from './list.page';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, ListPageRoutingModule, PipesModule, ScrollingModule],\n  declarations: [ListPage],\n})\nexport class ListPageModule {}\n","<ion-header class=\"ion-no-border\">\n  <ion-grid>\n    <ion-row>\n      <ion-col size=\"2\">\n        <ion-back-button mode=\"md\" color=\"primary\" defaultHref=\"/\"></ion-back-button>\n      </ion-col>\n      <ion-col size=\"10\">\n        <ion-searchbar animated color=\"primary\" placeholder=\"Buscar\" (ionChange)=\"term = $event.detail.value\"> </ion-searchbar>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n</ion-header>\n\n<ion-content class=\"ion-padding\">\n  <!-- Listado de empresas -->\n  <ng-container *ngIf=\"companies?.length; else noCompaniesTmp\">\n    <cdk-virtual-scroll-viewport itemSize=\"150\" minBufferPx=\"750\" maxBufferPx=\"1500\">\n      <ion-list class=\"companies\" lines=\"none\">\n        <ion-item\n          class=\"company ion-margin-bottom\"\n          *cdkVirtualFor=\"let c of companies | filterCompanies : ['strRazonSocial', 'strNumeroDcto', 'stringObservaciones']: term\"\n        >\n          <ng-container *ngTemplateOutlet=\"companyTmp; context: { company: c }\"></ng-container>\n        </ion-item>\n      </ion-list>\n    </cdk-virtual-scroll-viewport>\n  </ng-container>\n\n  <!-- Descargar empresas -->\n  <ion-fab vertical=\"bottom\" horizontal=\"center\" slot=\"fixed\">\n    <ion-fab-button (click)=\"fetchCompanies()\">\n      <ion-icon name=\"cloud-download-outline\"></ion-icon>\n    </ion-fab-button>\n  </ion-fab>\n</ion-content>\n\n<!-- Plantilla para vista sin empresas -->\n<ng-template #noCompaniesTmp>\n  <div class=\"no-companies-wrapper\">\n    <div class=\"message ion-padding\">\n      <img src=\"../../../assets/icon/icono_observaciones.svg\" />\n      <h3>Recuerde sincronizar las empresas que se van actualizar aquí.</h3>\n      <ion-icon name=\"arrow-down-outline\"></ion-icon>\n    </div>\n  </div>\n</ng-template>\n\n<!-- Plantilla de empresa -->\n<ng-template #companyTmp let-company=\"company\">\n  <a class=\"w-100\" [routerLink]=\"[company.Pk_Id_AS_004_Empresas_AMigrar]\">\n    <ion-card class=\"ion-no-margin\">\n      <ion-card-content>\n        <ion-item lines=\"none\">{{ company.strRazonSocial }}</ion-item>\n        <ion-item lines=\"none\">{{ company.str_Sigla_Documento }}: {{ company.strNumeroDcto }}</ion-item>\n        <ion-item lines=\"none\" class=\"observaciones\">Observaciones: {{ company.stringObservaciones }}</ion-item>\n      </ion-card-content>\n    </ion-card>\n  </a>\n</ng-template>\n","import { HttpErrorResponse } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { finalize } from 'rxjs/operators';\nimport { AlertService } from 'src/app/services/alert/alert.service';\nimport { CompaniesService } from 'src/app/services/companies/companies.service';\nimport { StorageService } from 'src/app/storage.service';\n\n/**\n * Componente para la vista de listado de empresas migradas.\n */\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.page.html',\n  styleUrls: ['./list.page.scss'],\n})\nexport class ListPage {\n  /**\n   * Listado de empresas migradas.\n   */\n  companies: any[];\n\n  /**\n   * Término de búsqueda para la casilla de filtrado de empresas.\n   */\n  term: string;\n\n  constructor(\n    private companiesService: CompaniesService,\n    private storageService: StorageService,\n    private alertService: AlertService\n  ) {}\n\n  ionViewWillEnter(): void {\n    this.retrieveCompanies();\n  }\n\n  /**\n   * Obtiene el listado de empresas migradas.\n   */\n  async fetchCompanies(): Promise<void> {\n    const onSuccess = async (response: any): Promise<void> => {\n      this.companies = await this.excludeConfirmed(response);\n    };\n\n    const onError = (error: any): void => {\n      let header: string;\n      let message: string;\n\n      if (error instanceof HttpErrorResponse) {\n        if (error.status === 417) {\n          header = 'Sin datos';\n          message = 'Estimado usuario, no tiene empresas agendadas para actualizar.';\n        } else {\n          header = 'Error de conexión';\n          message = 'Ha ocurrido un error de conexión con el servidor.';\n        }\n      } else {\n        header = 'Memoria llena';\n        message = 'Compruebe que tiene suficiente espacio disponible en el dispositivo.';\n      }\n\n      this.alertService.showAlert(header, message);\n    };\n\n    const loading = await this.alertService.showLoading();\n    const session = await this.storageService.get('sesion');\n\n    this.companiesService\n      .fetchCompanies(session.idRegistro)\n      .pipe(finalize(() => this.alertService.hideLoading(loading)))\n      .subscribe(\n        r => onSuccess(r),\n        e => onError(e)\n      );\n  }\n\n  /**\n   * Establece las empresas migradas que se encuentren en el almacén de datos.\n   */\n  private async retrieveCompanies(): Promise<void> {\n    this.companies = await this.excludeConfirmed(await this.companiesService.companies);\n  }\n\n  /**\n   * Excluye del listado las compañías que ya hayan sido editadas y confirmadas.\n   *\n   * Estas compañías solo tienen pendiente el envío de datos, y pueden verse en el módulo\n   * _Empresas por enviar_.\n   */\n  private async excludeConfirmed(companies: any[]): Promise<any[]> {\n    const updatedCompanies = await this.companiesService.updatedCompanies;\n    const confirmed = updatedCompanies.filter(u => u.__confirmed);\n    const editables = companies.filter(c => !confirmed.find(u => u.Pk_Id_AS_004_Empresas_AMigrar === c.Pk_Id_AS_004_Empresas_AMigrar));\n\n    return editables;\n  }\n}\n"]}