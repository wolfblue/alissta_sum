{"version":3,"sources":["./src/app/services/companies/companies.service.ts","./src/app/storage.service.ts"],"names":[],"mappings":"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","file":"default~contact-list-contact-list-module~details-details-module~edit-address-edit-address-module~edi~22cf7fc4-es2015.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { defer, from, Observable, throwError } from 'rxjs';\nimport { concatMap, map, tap } from 'rxjs/operators';\nimport { StorageService } from 'src/app/storage.service';\nimport { environment } from 'src/environments/environment';\n\n/**\n * Manejo de empresas migradas.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CompaniesService {\n  /**\n   * Listado de empresas migradas.\n   */\n  get companies() {\n    return (async () => {\n      if (!this._companies) {\n        await this.retrieveCompanies();\n      }\n\n      return this._companies;\n    })();\n  }\n\n  /**\n   * Listado de departamentos.\n   */\n  get departamentos() {\n    return (async () => await this.storageService.get('migrated_departamentos'))();\n  }\n\n  /**\n   * Listado de municipios.\n   */\n  get municipios() {\n    return (async () => await this.storageService.get('migrated_municipios'))();\n  }\n\n  /**\n   * Listado de tipos de vía.\n   */\n  get vias() {\n    return (async () => await this.storageService.get('migrated_vias'))();\n  }\n\n  /**\n   * Listado de tipos de cuadrante.\n   */\n  get cuadrantes() {\n    return (async () => await this.storageService.get('migrated_cuadrantes'))();\n  }\n\n  /**\n   * Listado de tipos de complemento.\n   */\n  get complementos() {\n    return (async () => await this.storageService.get('migrated_complementos'))();\n  }\n\n  /**\n   * Listado de tipos de barrio.\n   */\n  get barrios() {\n    return (async () => await this.storageService.get('migrated_barrios'))();\n  }\n\n  /**\n   * Listado de tipos de urbanización.\n   */\n  get urbanizaciones() {\n    return (async () => await this.storageService.get('migrated_urbanizaciones'))();\n  }\n\n  /**\n   * Listado de tipos de manzana.\n   */\n  get manzanas() {\n    return (async () => await this.storageService.get('migrated_manzanas'))();\n  }\n\n  /**\n   * Listado de tipos de predio.\n   */\n  get predios() {\n    return (async () => await this.storageService.get('migrated_predios'))();\n  }\n\n  /**\n   * Listado de empresas actualizadas.\n   */\n  get updatedCompanies() {\n    return (async () => {\n      if (!this._udpatedCompanies) {\n        await this.retrieveUpdatedCompanies();\n      }\n\n      return this._udpatedCompanies;\n    })();\n  }\n\n  /**\n   * Empresa que está siendo actualmente manipulada.\n   */\n  get company() {\n    return this._company;\n  }\n\n  /**\n   * Obtiene el responsable de la ARL (usuario actual).\n   */\n  get responsableARL() {\n    return (async () => {\n      return await this.storageService.get('sesion');\n    })();\n  }\n\n  /**\n   * Listado de empresas migradas.\n   */\n  private _companies: any[];\n\n  /**\n   * Listado de empresas actualizadas.\n   */\n  private _udpatedCompanies: any[];\n\n  /**\n   * Empresa que está siendo actualmente manipulada.\n   */\n  private _company: any;\n\n  constructor(\n    private http: HttpClient,\n    private storageService: StorageService\n  ) {}\n\n  /**\n   * Obtiene el listado de empresas migradas desde el servidor.\n   *\n   * Actualiza la lista del almacén de datos y regresa este valor.\n   *\n   * @param idUsuario Identificación del usuario por el cual filtrar las empresas.\n   */\n  fetchCompanies(idUsuario: number): Observable<any> {\n    const url = `${environment.API_LISTAR_EMPRESAS_MIGRADAS}?id_Usuario=${idUsuario}`;\n\n    return this.http.post(url, null).pipe(\n      concatMap((r: any) => defer(() => from(this.setCompanies(r)))),\n      map(r => {\n        if (r) {\n          return this._companies;\n        }\n\n        throw new Error('Full memory.');\n      })\n    );\n  }\n\n  /**\n   * Establece la empresa que se va a modificar. Se realiza una búsqueda de la empresa\n   * por el identificador proporcionado. Primero se realiza una búsqueda dentro\n   * del arreglo de empresas modificadas y, si no está presente, se busca en el arreglo\n   * de empresas migradas.\n   *\n   * _IMPORTANTE: Solo puede haber una empresa siendo modificada a la vez._\n   *\n   * @param id Identificador de la empresa.\n   */\n  async prepareCompany(id: number): Promise<any> {\n    if (this.company) {\n      throw new Error('Company already in place.');\n    }\n\n    let result = await this.updatedCompanies;\n    let company = result.find(r => r.Pk_Id_AS_004_Empresas_AMigrar === id);\n\n    if (!company) {\n      result = await this.companies;\n      company = result.find(r => r.Pk_Id_AS_004_Empresas_AMigrar === id);\n    }\n\n    this._company = JSON.parse(JSON.stringify(company));\n\n    return this.company;\n  }\n\n  /**\n   * Guarda en el almacén de datos los cambios hechos a la empresa actualmente en edición.\n   *\n   * Regresa verdadero si el proceso se realizó satisfactoriamente, y falso en caso de que\n   * no haya memoria en el dispositivo.\n   */\n  async saveChanges(): Promise<boolean> {\n    if (!this.company) {\n      throw new Error('No company set.');\n    }\n\n    const updatedCompanies = await this.updatedCompanies;\n    const index = updatedCompanies.findIndex(c => c.Pk_Id_AS_004_Empresas_AMigrar === this.company.Pk_Id_AS_004_Empresas_AMigrar);\n\n    if (index < 0) {\n      updatedCompanies.push(this.company);\n    } else {\n      updatedCompanies[index] = this.company;\n    }\n\n    const result = this.setUpdatedCompanies(updatedCompanies);\n\n    if (result) {\n      this.discardChanges();\n    }\n\n    return result;\n  }\n\n  /**\n   * Descarta los cambios que hayan actualmente en memoria.\n   *\n   * Este método no elimina los cambios que hayan sido previamente guardados en el almacén de\n   * datos.\n   */\n  discardChanges(): void {\n    this._company = undefined;\n  }\n\n  /**\n   * Envía los cambios de la empresa actualmente en edición al servidor para ser procesados.\n   */\n  save(): Observable<any> {\n    if (!this.company) {\n      throw new Error('No company set.');\n    }\n\n    const url = environment.API_GUARDAR_EMPRESA_MIGRADA;\n\n    console.log(\"LogDev save: \", JSON.stringify(url));\n    console.log(\"LogDev save: \", JSON.stringify(this.company).substr(0,4000));\n    console.log(\"LogDev save: \", JSON.stringify(this.company).substr(3999,4000));\n    console.log(\"LogDev save: \", JSON.stringify(this.company).substr(7998,4000));\n    console.log(\"LogDev save: \", JSON.stringify(this.company).substr(11997,4000));\n    console.log(\"LogDev save: \", JSON.stringify(this.company).substr(15996,4000));\n    console.log(\"LogDev save: \", JSON.stringify(this.company).substr(19995,4000));\n    console.log(\"LogDev save: \", JSON.stringify(this.company).substr(23994));\n    \n\n    return this.http.post(url, this.company).pipe(\n\n      tap(async (r: any) => {\n        const result = r.split(';')[0];\n\n        if (result !== 'true') {\n          return;\n        }\n\n        const indexC = (await this.companies).findIndex(\n          c => c.Pk_Id_AS_004_Empresas_AMigrar === this.company.Pk_Id_AS_004_Empresas_AMigrar\n        );\n        this._companies.splice(indexC, 1);\n        await this.setCompanies(this._companies);\n\n        const indexM = (await this.updatedCompanies).find(\n          m => m.Pk_Id_AS_004_Empresas_AMigrar === this.company.Pk_Id_AS_004_Empresas_AMigrar\n        );\n        this._udpatedCompanies.splice(indexM, 1);\n        await this.setUpdatedCompanies(this._udpatedCompanies);\n\n        this.discardChanges();\n      })\n    );\n  }\n\n  /**\n   * Obtiene el listado de empresas migradas desde el almacén de datos.\n   */\n  private async retrieveCompanies(): Promise<void> {\n    const result = await this.storageService.get('migrated_companies');\n    this._companies = result ? result : [];\n  }\n\n  /**\n   * Establece el listado de empresas migradas indicado en el almacén de datos.\n   *\n   * @param companies Listado de empresas migradas.\n   */\n  private async setCompanies(companies: any[]): Promise<boolean> {\n    const departamentos = companies[0]?.listDertamentos ?? [];\n    const municipios = companies[0]?.listMunicipios ?? [];\n    const vias = companies[0]?.eDListaMaestrosDirecciones?.listaMaestrosAvenida ?? [];\n    const cuadrantes = companies[0]?.eDListaMaestrosDirecciones?.listaMaestrosCuadrante ?? [];\n    const complementos = companies[0]?.eDListaMaestrosDirecciones?.listaMaestrosSufijos ?? [];\n    const barrios = companies[0]?.eDListaMaestrosDirecciones?.listaMaestrosBarrios ?? [];\n    const urbanizaciones = companies[0]?.eDListaMaestrosDirecciones?.listaMaestrosUrbanizacion ?? [];\n    const manzanas = companies[0]?.eDListaMaestrosDirecciones?.listaMaestrosManzana ?? [];\n    const predios = companies[0]?.eDListaMaestrosDirecciones?.listaMaestrosTipoDePredio ?? [];\n    delete companies[0]?.listDertamentos;\n    delete companies[0]?.listMunicipios;\n    delete companies[0]?.eDListaMaestrosDirecciones;\n    const result = await this.storageService.set('migrated_companies', companies);\n\n    if (departamentos.length) {\n      await this.storageService.set('migrated_departamentos', departamentos);\n    }\n\n    if (municipios.length) {\n      await this.storageService.set('migrated_municipios', municipios);\n    }\n\n    if (vias.length) {\n      await this.storageService.set('migrated_vias', vias);\n    }\n\n    if (cuadrantes.length) {\n      await this.storageService.set('migrated_cuadrantes', cuadrantes);\n    }\n\n    if (complementos.length) {\n      await this.storageService.set('migrated_complementos', complementos);\n    }\n\n    if (barrios.length) {\n      await this.storageService.set('migrated_barrios', barrios);\n    }\n\n    if (urbanizaciones.length) {\n      await this.storageService.set('migrated_urbanizaciones', urbanizaciones);\n    }\n\n    if (manzanas.length) {\n      await this.storageService.set('migrated_manzanas', manzanas);\n    }\n\n    if (predios.length) {\n      await this.storageService.set('migrated_predios', predios);\n    }\n\n    if (result) {\n      this._companies = companies;\n    }\n\n    return result;\n  }\n\n  /**\n   * Obtiene el listado de empresas actualizadas desde el almacén de datos.\n   */\n  private async retrieveUpdatedCompanies(): Promise<void> {\n    const result = await this.storageService.get('updated_companies');\n    this._udpatedCompanies = result ? result : [];\n  }\n\n  /**\n   * Establece el listado de empresas actualizadas indicado en el almacén de datos.\n   *\n   * @param companies Listado de empresas actualizadas.\n   */\n  private async setUpdatedCompanies(companies: any[]): Promise<boolean> {\n    const result = await this.storageService.set('updated_companies', companies);\n\n    if (result) {\n      this._udpatedCompanies = companies;\n    }\n\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Storage } from '@ionic/storage';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StorageService {\r\n  constructor(private storage: Storage) {}\r\n\r\n  async set(key: string, value: any): Promise<boolean> {\r\n    let result: any;\r\n\r\n    try {\r\n      result = await this.storage.set(key, value);\r\n    } catch {\r\n      result = false;\r\n    }\r\n\r\n    return result !== false;\r\n  }\r\n\r\n  async get(key: string): Promise<any> {\r\n    let result: any;\r\n\r\n    try {\r\n      result = await this.storage.get(key);\r\n    } catch {}\r\n\r\n    return result;\r\n  }\r\n\r\n  remove(key: string) {\r\n    this.storage.remove(key);\r\n  }\r\n\r\n  clear() {\r\n    this.storage.clear();\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}