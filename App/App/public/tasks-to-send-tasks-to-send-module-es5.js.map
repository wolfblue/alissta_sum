{"version":3,"sources":["webpack:///src/app/pages/tasks-to-send/tasks-to-send-routing.module.ts","webpack:///src/app/pages/tasks-to-send/tasks-to-send.module.ts","webpack:///src/app/pages/tasks-to-send/tasks-to-send.page.html","webpack:///src/app/pages/tasks-to-send/tasks-to-send.page.ts"],"names":["routes","path","component","TasksToSendPageRoutingModule","forChild","imports","exports","TasksToSendPageModule","declarations","TasksToSendPage","storage","toastController","loadingCtlr","cacheService","alertController","advisoryTopicService","net","listAdvisory","actas","getInfoUser","getAdvisoryActsWithoutSending","get","infoUserARL","event","textoBuscar","detail","value","advisoryAct","checked","index","findIndex","a","splice","push","create","message","duration","toast","present","status","getNetworkStatus","Offline","presentToast","Online","mode","loading","checkNetwork","validateNetwork","notification","totalActas","length","actasEnviadas","presentLoading","i","acta","buildActa","sendTask","files","response","limpiarVariablesAsesoria","dismiss","forEach","actaSeleccionada","filter","find","aa","undefined","set","saveActaAsesoria","toPromise","creacionActa","split","f","body","UidActaAsesoria","uploadFileActaAsesoria","titulo","notificacion","header","backdropDismiss","buttons","alert","onDidDismiss","saveSurveyARL","infoSurveyARL","saveSurveyQR","infoSurveyQR","saveTypeAdvice","typeAdvisory","saveInfoCompany","infoCompany","saveActivities","activities","saveCommentsAdvice","commentsAdvice","idProveedor","createActaAsesoria","search","selector","templateUrl","styleUrls"],"mappings":"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","file":"tasks-to-send-tasks-to-send-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TasksToSendPage } from './tasks-to-send.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TasksToSendPage,\n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class TasksToSendPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TasksToSendPageRoutingModule } from './tasks-to-send-routing.module';\n\nimport { TasksToSendPage } from './tasks-to-send.page';\nimport { PipesModule } from '../../pipes/pipes.module';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, IonicModule, PipesModule, TasksToSendPageRoutingModule],\n  declarations: [TasksToSendPage],\n})\nexport class TasksToSendPageModule {}\n","<ion-header>\n  <ion-grid>\n    <ion-row>\n      <ion-col size=\"2\">\n        <ion-toolbar color=\"tertiary\">\n          <ion-buttons slot=\"start\">\n            <ion-back-button color=\"primary\" mode=\"md\" defaultHref=\"/\"></ion-back-button>\n          </ion-buttons>\n        </ion-toolbar>\n      </ion-col>\n      <ion-col size=\"10\">\n        <ion-title class=\"titulo\">Actas por enviar</ion-title>\n      </ion-col>\n    </ion-row>\n  </ion-grid>\n</ion-header>\n\n<ion-content class=\"ion-padding\">\n  <ion-searchbar animated color=\"primary\" placeholder=\"Buscar\" (ionChange)=\"search($event)\"></ion-searchbar>\n\n  <ion-slides mode=\"ios\" *ngIf=\"!listAdvisory?.length\">\n    <!-- <ion-slides mode=\"ios\" *ngIf=\"showListPendingVisit\"> -->\n    <ion-slide>\n      <ion-grid>\n        <ion-row>\n          <ion-col size=\"12\">\n            <div class=\"ion-text-center\">\n              <img class=\"imgIcono\" src=\"../../../assets/icon/icono_observaciones.svg\" alt=\"\" />\n            </div>\n          </ion-col>\n        </ion-row>\n        <ion-row>\n          <ion-col size=\"12\">\n            <strong>\n              <h1 class=\"tituloSlide\">No tiene actas de asesoría por enviar.</h1>\n            </strong>\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n    </ion-slide>\n  </ion-slides>\n\n  <ion-list>\n    <ion-item color=\"secondary\" *ngFor=\"let AdvisoryAct of listAdvisory; let i = index\">\n      <ion-grid>\n        <ion-row>\n          <ion-col size=\"12\">\n            <ion-row>\n              <ion-col size=\"12\">\n                <p><strong>Razón Social</strong> {{AdvisoryAct.infoCompany.nombre}}</p>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col size=\"12\">\n                <p>\n                  <strong>Identificación Empresa</strong>\n                  {{AdvisoryAct.infoCompany.tipoDocumento}} - {{AdvisoryAct.infoCompany.numeroDocumento}}\n                </p>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col size=\"12\">\n                <p><strong>Fecha de creación</strong> {{AdvisoryAct.infoSurveyQR.dateCreatedSurvey | date: 'medium' }}</p>\n              </ion-col>\n            </ion-row>\n            <ion-row>\n              <ion-col size=\"12\">\n                <ion-item lines=\"none\">\n                  <p><strong>Seleccionar Acta de Asesoría</strong></p>\n                  <ion-checkbox slot=\"end\" color=\"primary\" (ionChange)=\"actaSeleccionada($event, AdvisoryAct)\"></ion-checkbox>\n                </ion-item>\n              </ion-col>\n            </ion-row>\n          </ion-col>\n        </ion-row>\n      </ion-grid>\n    </ion-item>\n  </ion-list>\n\n  <ion-grid>\n    <ion-row>\n      <ion-col size=\"3\"></ion-col>\n      <ion-col size=\"6\" *ngIf=\"actas.length\">\n        <img class=\"btnEnviar\" (click)=\"sendTasks()\" src=\"../../../assets/icon/boton_enviar.png\" alt=\"enviar\" />\n      </ion-col>\n      <ion-col size=\"3\"></ion-col>\n    </ion-row>\n  </ion-grid>\n</ion-content>\n","import { Component, OnInit } from '@angular/core';\nimport { AlertController, LoadingController, ToastController } from '@ionic/angular';\nimport { Storage } from '@ionic/storage';\nimport { AdvisoryTopicService } from '../../services/activities/advisoryTopic/advisory-topic.service';\nimport { CacheService } from '../../services/cache/cache.service';\nimport { ConnectionStatusEnum, NetworkService } from '../../services/network/network.service';\n\n@Component({\n  selector: 'app-tasks-to-send',\n  templateUrl: './tasks-to-send.page.html',\n  styleUrls: ['./tasks-to-send.page.scss'],\n})\nexport class TasksToSendPage implements OnInit {\n  listAdvisory = [];\n\n  loading: HTMLIonLoadingElement;\n\n  infoUserARL: any;\n\n  textoBuscar: string;\n\n  actas: any[];\n\n  constructor(\n    private storage: Storage,\n    private toastController: ToastController,\n    private loadingCtlr: LoadingController,\n    private cacheService: CacheService,\n    private alertController: AlertController,\n    private advisoryTopicService: AdvisoryTopicService,\n    private net: NetworkService\n  ) {\n    this.actas = [];\n  }\n\n  ngOnInit() {\n    this.getInfoUser();\n    this.getAdvisoryActsWithoutSending();\n  }\n\n  async getInfoUser() {\n    this.infoUserARL = await this.storage.get('sesion');\n  }\n\n  search(event) {\n    this.textoBuscar = event.detail.value;\n  }\n\n  async getAdvisoryActsWithoutSending() {\n    this.listAdvisory = await this.storage.get('actasAsesoriaSinInternet');\n  }\n\n  actaSeleccionada(event: any, advisoryAct: any) {\n    if (!event.detail.checked) {\n      const index = this.actas.findIndex(a => a === advisoryAct);\n\n      if (index < 0) {\n        return;\n      }\n\n      this.actas.splice(index, 1);\n\n      return;\n    }\n\n    this.actas.push(advisoryAct);\n  }\n\n  async presentToast() {\n    const toast = await this.toastController.create({\n      message: 'Verifique su conexión a internet.',\n      duration: 2000,\n    });\n    toast.present();\n  }\n\n  validateNetwork() {\n    const status = this.net.getNetworkStatus();\n\n    if (status === ConnectionStatusEnum.Offline) {\n      this.presentToast();\n    }\n\n    return status === ConnectionStatusEnum.Online;\n  }\n\n  async presentLoading() {\n    this.loading = await this.loadingCtlr.create({\n      mode: 'ios',\n      message: 'Cargando',\n    });\n    return this.loading.present();\n  }\n\n  async sendTasks(): Promise<void> {\n    const checkNetwork = this.validateNetwork();\n\n    if (!checkNetwork) {\n      this.notification('Atención', 'Compruebe su conexión a internet.');\n\n      return;\n    }\n\n    const totalActas = this.actas.length;\n    const actasEnviadas: any[] = [];\n    await this.presentLoading();\n\n    for (let i = 0; i < this.actas.length; i++) {\n      const a = this.actas[i];\n\n      const toast = await this.toastController.create({\n        message: `Enviando acta ${i + 1} de ${totalActas}...`,\n        duration: 2000,\n      });\n\n      toast.present();\n      const acta = this.buildActa(a);\n      const response = await this.sendTask(acta, a.files);\n      this.cacheService.limpiarVariablesAsesoria();\n\n      if (response) {\n        actasEnviadas.push(a);\n      }\n    }\n\n    this.loading.dismiss();\n    actasEnviadas.forEach(a => this.actaSeleccionada({ detail: { checked: false } }, a));\n    this.listAdvisory = this.listAdvisory.filter(a => actasEnviadas.find(aa => aa === a) === undefined);\n    this.storage.set('actasAsesoriaSinInternet', this.listAdvisory);\n    this.notification('Atención', 'Los documentos seleccionados se enviaron satisfactoriamente a la web.');\n  }\n\n  async sendTask(acta: any, files: any[] = []): Promise<boolean> {\n    let response: boolean;\n    let creacionActa = await this.advisoryTopicService.saveActaAsesoria(acta).toPromise();\n    creacionActa = creacionActa.split(';');\n\n    if (creacionActa[0] === 'true' && creacionActa[1] !== '-1') {\n      for (const f of files) {\n        const body = { ...f, UidActaAsesoria: +creacionActa[1] };\n        await this.advisoryTopicService.uploadFileActaAsesoria(body).toPromise();\n      }\n\n      response = true;\n    } else {\n      this.notification('Error', 'Ocurrio un error y no se pudo crear el acta de asesoría');\n      response = false;\n    }\n\n    return response;\n  }\n\n  async notification(titulo, notificacion) {\n    const alert = await this.alertController.create({\n      header: titulo,\n      backdropDismiss: false,\n      mode: 'ios',\n      message: notificacion,\n      buttons: ['ACEPTAR'],\n    });\n\n    alert.onDidDismiss();\n\n    await alert.present();\n  }\n\n  /**\n   * Construye el cuerpo de la petición para guardar el acta.\n   *\n   * @param acta Acta.\n   */\n  private buildActa(acta: any): any {\n    this.cacheService.saveSurveyARL(acta.infoSurveyARL);\n    this.cacheService.saveSurveyQR(acta.infoSurveyQR);\n    this.cacheService.saveTypeAdvice(acta.typeAdvisory);\n    this.cacheService.saveInfoCompany(acta.infoCompany);\n    this.cacheService.saveActivities(acta.activities);\n    this.cacheService.saveCommentsAdvice(acta.commentsAdvice);\n    const idProveedor = this.infoUserARL.idProveedor;\n    const body = this.cacheService.createActaAsesoria(idProveedor);\n\n    return body;\n  }\n}\n"]}