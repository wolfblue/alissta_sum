{"version":3,"sources":["webpack:///src/app/services/companies/companies.service.ts","webpack:///src/app/storage.service.ts"],"names":["CompaniesService","http","storageService","_companies","retrieveCompanies","get","_udpatedCompanies","retrieveUpdatedCompanies","_company","idUsuario","url","API_LISTAR_EMPRESAS_MIGRADAS","post","pipe","r","setCompanies","Error","id","company","updatedCompanies","result","find","Pk_Id_AS_004_Empresas_AMigrar","companies","JSON","parse","stringify","index","findIndex","c","push","setUpdatedCompanies","discardChanges","undefined","API_GUARDAR_EMPRESA_MIGRADA","console","log","substr","split","indexC","splice","indexM","m","departamentos","listDertamentos","municipios","listMunicipios","vias","eDListaMaestrosDirecciones","listaMaestrosAvenida","cuadrantes","listaMaestrosCuadrante","complementos","listaMaestrosSufijos","barrios","listaMaestrosBarrios","urbanizaciones","listaMaestrosUrbanizacion","manzanas","listaMaestrosManzana","predios","listaMaestrosTipoDePredio","set","length","providedIn","StorageService","storage","key","value","remove","clear"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;;;;QAMaA,gB;AAyHX,gCACUC,IADV,EAEUC,cAFV,EAEwC;AAAA;;AAD9B,aAAAD,IAAA,GAAAA,IAAA;AACA,aAAAC,cAAA,GAAAA,cAAA;AACN;AA3HJ;;;;;;;aAGA,eAAgB;AAAA;;AACd,iBAAQ;AAAA,mBAAY;AAAA;AAAA;AAAA;AAAA,wBACb,KAAKC,UADQ;AAAA;AAAA;AAAA;;AAAA;AAEhB,2BAAM,KAAKC,iBAAL,EAAN;;AAFgB;AAAA,qDAKX,KAAKD,UALM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;AAAA,WAAD,EAAP;AAOD;AAED;;;;;;aAGA,eAAoB;AAAA;;AAClB,iBAAQ;AAAA,mBAAY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAM,KAAKD,cAAL,CAAoBG,GAApB,CAAwB,wBAAxB,CAAN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;AAAA,WAAD,EAAP;AACD;AAED;;;;;;aAGA,eAAiB;AAAA;;AACf,iBAAQ;AAAA,mBAAY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAM,KAAKH,cAAL,CAAoBG,GAApB,CAAwB,qBAAxB,CAAN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;AAAA,WAAD,EAAP;AACD;AAED;;;;;;aAGA,eAAW;AAAA;;AACT,iBAAQ;AAAA,mBAAY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAM,KAAKH,cAAL,CAAoBG,GAApB,CAAwB,eAAxB,CAAN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;AAAA,WAAD,EAAP;AACD;AAED;;;;;;aAGA,eAAiB;AAAA;;AACf,iBAAQ;AAAA,mBAAY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAM,KAAKH,cAAL,CAAoBG,GAApB,CAAwB,qBAAxB,CAAN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;AAAA,WAAD,EAAP;AACD;AAED;;;;;;aAGA,eAAmB;AAAA;;AACjB,iBAAQ;AAAA,mBAAY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAM,KAAKH,cAAL,CAAoBG,GAApB,CAAwB,uBAAxB,CAAN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;AAAA,WAAD,EAAP;AACD;AAED;;;;;;aAGA,eAAc;AAAA;;AACZ,iBAAQ;AAAA,mBAAY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAM,KAAKH,cAAL,CAAoBG,GAApB,CAAwB,kBAAxB,CAAN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;AAAA,WAAD,EAAP;AACD;AAED;;;;;;aAGA,eAAqB;AAAA;;AACnB,iBAAQ;AAAA,mBAAY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAM,KAAKH,cAAL,CAAoBG,GAApB,CAAwB,yBAAxB,CAAN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;AAAA,WAAD,EAAP;AACD;AAED;;;;;;aAGA,eAAe;AAAA;;AACb,iBAAQ;AAAA,mBAAY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAM,KAAKH,cAAL,CAAoBG,GAApB,CAAwB,mBAAxB,CAAN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;AAAA,WAAD,EAAP;AACD;AAED;;;;;;aAGA,eAAc;AAAA;;AACZ,iBAAQ;AAAA,mBAAY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAM,KAAKH,cAAL,CAAoBG,GAApB,CAAwB,kBAAxB,CAAN;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;AAAA,WAAD,EAAP;AACD;AAED;;;;;;aAGA,eAAuB;AAAA;;AACrB,iBAAQ;AAAA,mBAAY;AAAA;AAAA;AAAA;AAAA,wBACb,KAAKC,iBADQ;AAAA;AAAA;AAAA;;AAAA;AAEhB,2BAAM,KAAKC,wBAAL,EAAN;;AAFgB;AAAA,uDAKX,KAAKD,iBALM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;AAAA,WAAD,EAAP;AAOD;AAED;;;;;;aAGA,eAAc;AACZ,iBAAO,KAAKE,QAAZ;AACD;AAED;;;;;;aAGA,eAAqB;AAAA;;AACnB,iBAAQ;AAAA,mBAAY;AAAA;AAAA;AAAA;AAAA;AACX,2BAAM,KAAKN,cAAL,CAAoBG,GAApB,CAAwB,QAAxB,CAAN;;AADW;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAZ;AAAA,WAAD,EAAP;AAGD;AAsBD;;;;;;;;;;eAOA,wBAAeI,SAAf,EAAgC;AAAA;;AAC9B,cAAMC,GAAG,aAAM,yEAAYC,4BAAlB,yBAA6DF,SAA7D,CAAT;AAEA,iBAAO,KAAKR,IAAL,CAAUW,IAAV,CAAeF,GAAf,EAAoB,IAApB,EAA0BG,IAA1B,CACL,iEAAU,UAACC,CAAD;AAAA,mBAAY,mDAAM;AAAA,qBAAM,kDAAK,OAAI,CAACC,YAAL,CAAkBD,CAAlB,CAAL,CAAN;AAAA,aAAN,CAAZ;AAAA,WAAV,CADK,EAEL,2DAAI,UAAAA,CAAC,EAAI;AACP,gBAAIA,CAAJ,EAAO;AACL,qBAAO,OAAI,CAACX,UAAZ;AACD;;AAED,kBAAM,IAAIa,KAAJ,CAAU,cAAV,CAAN;AACD,WAND,CAFK,CAAP;AAUD;AAED;;;;;;;;;;;;;eAUM,wBAAeC,EAAf,EAAyB;;;;;;uBACzB,KAAKC,O;;;;;wBACD,IAAIF,KAAJ,CAAU,2BAAV,C;;;;AAGK,yBAAM,KAAKG,gBAAX;;;AAATC,wB;AACAF,yB,GAAUE,MAAM,CAACC,IAAP,CAAY,UAAAP,CAAC;AAAA,2BAAIA,CAAC,CAACQ,6BAAF,KAAoCL,EAAxC;AAAA,mBAAb,C;;sBAETC,O;;;;;;AACM,yBAAM,KAAKK,SAAX;;;AAATH,wB;AACAF,yBAAO,GAAGE,MAAM,CAACC,IAAP,CAAY,UAAAP,CAAC;AAAA,2BAAIA,CAAC,CAACQ,6BAAF,KAAoCL,EAAxC;AAAA,mBAAb,CAAV;;;AAGF,uBAAKT,QAAL,GAAgBgB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeR,OAAf,CAAX,CAAhB;qDAEO,KAAKA,O;;;;;;;;AACb;AAED;;;;;;;;;eAMM,uBAAW;;;;;;;;sBACV,KAAKA,O;;;;;wBACF,IAAIF,KAAJ,CAAU,iBAAV,C;;;;AAGiB,yBAAM,KAAKG,gBAAX;;;AAAnBA,kC;AACAQ,uB,GAAQR,gBAAgB,CAACS,SAAjB,CAA2B,UAAAC,CAAC;AAAA,2BAAIA,CAAC,CAACP,6BAAF,KAAoC,OAAI,CAACJ,OAAL,CAAaI,6BAArD;AAAA,mBAA5B,C;;AAEd,sBAAIK,KAAK,GAAG,CAAZ,EAAe;AACbR,oCAAgB,CAACW,IAAjB,CAAsB,KAAKZ,OAA3B;AACD,mBAFD,MAEO;AACLC,oCAAgB,CAACQ,KAAD,CAAhB,GAA0B,KAAKT,OAA/B;AACD;;AAEKE,wB,GAAS,KAAKW,mBAAL,CAAyBZ,gBAAzB,C;;AAEf,sBAAIC,MAAJ,EAAY;AACV,yBAAKY,cAAL;AACD;;qDAEMZ,M;;;;;;;;AACR;AAED;;;;;;;;;eAMA,0BAAc;AACZ,eAAKZ,QAAL,GAAgByB,SAAhB;AACD;AAED;;;;;;eAGA,gBAAI;AAAA;;AACF,cAAI,CAAC,KAAKf,OAAV,EAAmB;AACjB,kBAAM,IAAIF,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,cAAMN,GAAG,GAAG,yEAAYwB,2BAAxB;AAEAC,iBAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BZ,IAAI,CAACE,SAAL,CAAehB,GAAf,CAA7B;AACAyB,iBAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BZ,IAAI,CAACE,SAAL,CAAe,KAAKR,OAApB,EAA6BmB,MAA7B,CAAoC,CAApC,EAAsC,IAAtC,CAA7B;AACAF,iBAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BZ,IAAI,CAACE,SAAL,CAAe,KAAKR,OAApB,EAA6BmB,MAA7B,CAAoC,IAApC,EAAyC,IAAzC,CAA7B;AACAF,iBAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BZ,IAAI,CAACE,SAAL,CAAe,KAAKR,OAApB,EAA6BmB,MAA7B,CAAoC,IAApC,EAAyC,IAAzC,CAA7B;AACAF,iBAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BZ,IAAI,CAACE,SAAL,CAAe,KAAKR,OAApB,EAA6BmB,MAA7B,CAAoC,KAApC,EAA0C,IAA1C,CAA7B;AACAF,iBAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BZ,IAAI,CAACE,SAAL,CAAe,KAAKR,OAApB,EAA6BmB,MAA7B,CAAoC,KAApC,EAA0C,IAA1C,CAA7B;AACAF,iBAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BZ,IAAI,CAACE,SAAL,CAAe,KAAKR,OAApB,EAA6BmB,MAA7B,CAAoC,KAApC,EAA0C,IAA1C,CAA7B;AACAF,iBAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BZ,IAAI,CAACE,SAAL,CAAe,KAAKR,OAApB,EAA6BmB,MAA7B,CAAoC,KAApC,CAA7B;AAGA,iBAAO,KAAKpC,IAAL,CAAUW,IAAV,CAAeF,GAAf,EAAoB,KAAKQ,OAAzB,EAAkCL,IAAlC,CAEL,2DAAI,UAAOC,CAAP;AAAA,mBAAkB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACdM,0BADc,GACLN,CAAC,CAACwB,KAAF,CAAQ,GAAR,EAAa,CAAb,CADK;;AAAA,0BAGhBlB,MAAM,KAAK,MAHK;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAOJ,2BAAM,KAAKG,SAAX;;AAPI;AAOdgB,0BAPc,mBAOkBX,SAPlB,CAQlB,UAAAC,CAAC;AAAA,6BAAIA,CAAC,CAACP,6BAAF,KAAoC,OAAI,CAACJ,OAAL,CAAaI,6BAArD;AAAA,qBARiB;;AAUpB,yBAAKnB,UAAL,CAAgBqC,MAAhB,CAAuBD,MAAvB,EAA+B,CAA/B;;AAVoB;AAWpB,2BAAM,KAAKxB,YAAL,CAAkB,KAAKZ,UAAvB,CAAN;;AAXoB;AAAA;AAaJ,2BAAM,KAAKgB,gBAAX;;AAbI;AAadsB,0BAbc,mBAayBpB,IAbzB,CAclB,UAAAqB,CAAC;AAAA,6BAAIA,CAAC,CAACpB,6BAAF,KAAoC,OAAI,CAACJ,OAAL,CAAaI,6BAArD;AAAA,qBAdiB;;AAgBpB,yBAAKhB,iBAAL,CAAuBkC,MAAvB,CAA8BC,MAA9B,EAAsC,CAAtC;;AAhBoB;AAiBpB,2BAAM,KAAKV,mBAAL,CAAyB,KAAKzB,iBAA9B,CAAN;;AAjBoB;AAmBpB,yBAAK0B,cAAL;;AAnBoB;AAAA;AAAA;AAAA;AAAA;AAAA,eAAlB;AAAA,WAAJ,CAFK,CAAP;AAwBD;AAED;;;;;;eAGc,6BAAiB;;;;;;;AACd,yBAAM,KAAK9B,cAAL,CAAoBG,GAApB,CAAwB,oBAAxB,CAAN;;;AAATe,wB;AACN,uBAAKjB,UAAL,GAAkBiB,MAAM,GAAGA,MAAH,GAAY,EAApC;;;;;;;;AACD;AAED;;;;;;;;eAKc,sBAAaG,SAAb,EAA6B;;;;;;;;AACnCoB,+B,GAAgB,CAAH,WAAGpB,SAAS,CAAC,CAAD,CAAZ,MAAe,IAAf,IAAe,aAAf,GAAe,MAAf,GAAe,GAAEqB,eAAd,MAA6B,IAA7B,IAA6B,aAA7B,GAA6B,EAA7B,GAAiC,E;AACjDC,4B,GAAa,CAAH,WAAGtB,SAAS,CAAC,CAAD,CAAZ,MAAe,IAAf,IAAe,aAAf,GAAe,MAAf,GAAe,GAAEuB,cAAd,MAA4B,IAA5B,IAA4B,aAA5B,GAA4B,EAA5B,GAAgC,E;AAC7CC,sB,GAAO,CAAH,iBAAGxB,SAAS,CAAC,CAAD,CAAZ,MAAe,IAAf,IAAe,aAAf,GAAe,MAAf,GAAe,GAAEyB,0BAAjB,MAA2C,IAA3C,IAA2C,aAA3C,GAA2C,MAA3C,GAA2C,GAAEC,oBAA1C,MAA8D,IAA9D,IAA8D,aAA9D,GAA8D,EAA9D,GAAkE,E;AACzEC,4B,GAAa,CAAH,iBAAG3B,SAAS,CAAC,CAAD,CAAZ,MAAe,IAAf,IAAe,aAAf,GAAe,MAAf,GAAe,GAAEyB,0BAAjB,MAA2C,IAA3C,IAA2C,aAA3C,GAA2C,MAA3C,GAA2C,GAAEG,sBAA1C,MAAgE,IAAhE,IAAgE,aAAhE,GAAgE,EAAhE,GAAoE,E;AACjFC,8B,GAAe,CAAH,iBAAG7B,SAAS,CAAC,CAAD,CAAZ,MAAe,IAAf,IAAe,aAAf,GAAe,MAAf,GAAe,GAAEyB,0BAAjB,MAA2C,IAA3C,IAA2C,aAA3C,GAA2C,MAA3C,GAA2C,GAAEK,oBAA1C,MAA8D,IAA9D,IAA8D,aAA9D,GAA8D,EAA9D,GAAkE,E;AACjFC,yB,GAAU,CAAH,iBAAG/B,SAAS,CAAC,CAAD,CAAZ,MAAe,IAAf,IAAe,aAAf,GAAe,MAAf,GAAe,GAAEyB,0BAAjB,MAA2C,IAA3C,IAA2C,aAA3C,GAA2C,MAA3C,GAA2C,GAAEO,oBAA1C,MAA8D,IAA9D,IAA8D,aAA9D,GAA8D,EAA9D,GAAkE,E;AAC5EC,gC,GAAiB,CAAH,iBAAGjC,SAAS,CAAC,CAAD,CAAZ,MAAe,IAAf,IAAe,aAAf,GAAe,MAAf,GAAe,GAAEyB,0BAAjB,MAA2C,IAA3C,IAA2C,aAA3C,GAA2C,MAA3C,GAA2C,GAAES,yBAA1C,MAAmE,IAAnE,IAAmE,aAAnE,GAAmE,EAAnE,GAAuE,E;AACxFC,0B,GAAW,CAAH,iBAAGnC,SAAS,CAAC,CAAD,CAAZ,MAAe,IAAf,IAAe,aAAf,GAAe,MAAf,GAAe,GAAEyB,0BAAjB,MAA2C,IAA3C,IAA2C,aAA3C,GAA2C,MAA3C,GAA2C,GAAEW,oBAA1C,MAA8D,IAA9D,IAA8D,aAA9D,GAA8D,EAA9D,GAAkE,E;AAC7EC,yB,GAAU,CAAH,iBAAGrC,SAAS,CAAC,CAAD,CAAZ,MAAe,IAAf,IAAe,aAAf,GAAe,MAAf,GAAe,GAAEyB,0BAAjB,MAA2C,IAA3C,IAA2C,aAA3C,GAA2C,MAA3C,GAA2C,GAAEa,yBAA1C,MAAmE,IAAnE,IAAmE,aAAnE,GAAmE,EAAnE,GAAuE,E;AACvF,wBAAOtC,SAAS,CAAC,CAAD,CAAhB,MAAmB,IAAnB,IAAmB,aAAnB,GAAmB,IAAnB,GAAmB,UAAEqB,eAArB;AACA,wBAAOrB,SAAS,CAAC,CAAD,CAAhB,MAAmB,IAAnB,IAAmB,aAAnB,GAAmB,IAAnB,GAAmB,UAAEuB,cAArB;AACA,wBAAOvB,SAAS,CAAC,CAAD,CAAhB,MAAmB,IAAnB,IAAmB,aAAnB,GAAmB,IAAnB,GAAmB,UAAEyB,0BAArB;;AACe,yBAAM,KAAK9C,cAAL,CAAoB4D,GAApB,CAAwB,oBAAxB,EAA8CvC,SAA9C,CAAN;;;AAATH,wB;;uBAEFuB,aAAa,CAACoB,M;;;;;;AAChB,yBAAM,KAAK7D,cAAL,CAAoB4D,GAApB,CAAwB,wBAAxB,EAAkDnB,aAAlD,CAAN;;;uBAGEE,UAAU,CAACkB,M;;;;;;AACb,yBAAM,KAAK7D,cAAL,CAAoB4D,GAApB,CAAwB,qBAAxB,EAA+CjB,UAA/C,CAAN;;;uBAGEE,IAAI,CAACgB,M;;;;;;AACP,yBAAM,KAAK7D,cAAL,CAAoB4D,GAApB,CAAwB,eAAxB,EAAyCf,IAAzC,CAAN;;;uBAGEG,UAAU,CAACa,M;;;;;;AACb,yBAAM,KAAK7D,cAAL,CAAoB4D,GAApB,CAAwB,qBAAxB,EAA+CZ,UAA/C,CAAN;;;uBAGEE,YAAY,CAACW,M;;;;;;AACf,yBAAM,KAAK7D,cAAL,CAAoB4D,GAApB,CAAwB,uBAAxB,EAAiDV,YAAjD,CAAN;;;uBAGEE,OAAO,CAACS,M;;;;;;AACV,yBAAM,KAAK7D,cAAL,CAAoB4D,GAApB,CAAwB,kBAAxB,EAA4CR,OAA5C,CAAN;;;uBAGEE,cAAc,CAACO,M;;;;;;AACjB,yBAAM,KAAK7D,cAAL,CAAoB4D,GAApB,CAAwB,yBAAxB,EAAmDN,cAAnD,CAAN;;;uBAGEE,QAAQ,CAACK,M;;;;;;AACX,yBAAM,KAAK7D,cAAL,CAAoB4D,GAApB,CAAwB,mBAAxB,EAA6CJ,QAA7C,CAAN;;;uBAGEE,OAAO,CAACG,M;;;;;;AACV,yBAAM,KAAK7D,cAAL,CAAoB4D,GAApB,CAAwB,kBAAxB,EAA4CF,OAA5C,CAAN;;;AAGF,sBAAIxC,MAAJ,EAAY;AACV,yBAAKjB,UAAL,GAAkBoB,SAAlB;AACD;;qDAEMH,M;;;;;;;;AACR;AAED;;;;;;eAGc,oCAAwB;;;;;;;AACrB,yBAAM,KAAKlB,cAAL,CAAoBG,GAApB,CAAwB,mBAAxB,CAAN;;;AAATe,wB;AACN,uBAAKd,iBAAL,GAAyBc,MAAM,GAAGA,MAAH,GAAY,EAA3C;;;;;;;;AACD;AAED;;;;;;;;eAKc,6BAAoBG,SAApB,EAAoC;;;;;;;AACjC,yBAAM,KAAKrB,cAAL,CAAoB4D,GAApB,CAAwB,mBAAxB,EAA6CvC,SAA7C,CAAN;;;AAATH,wB;;AAEN,sBAAIA,MAAJ,EAAY;AACV,yBAAKd,iBAAL,GAAyBiB,SAAzB;AACD;;qDAEMH,M;;;;;;;;AACR;;;;;;;uBAjWUpB,gB,EAAgB,uH,EAAA,8H;AAAA,K;;;aAAhBA,gB;AAAgB,eAAhBA,gBAAgB,K;AAAA,kBAFf;;;;;sEAEDA,gB,EAAgB;cAH5B,wDAG4B;eAHjB;AACVgE,oBAAU,EAAE;AADF,S;AAGiB,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;QCPhBC,c;AACX,8BAAoBC,OAApB,EAAsC;AAAA;;AAAlB,aAAAA,OAAA,GAAAA,OAAA;AAAoB;;;;eAElC,aAAIC,GAAJ,EAAiBC,KAAjB,EAA2B;;;;;;;;AAIpB,yBAAM,KAAKF,OAAL,CAAaJ,GAAb,CAAiBK,GAAjB,EAAsBC,KAAtB,CAAN;;;AAAThD,wB;;;;;;;AAEAA,wBAAM,GAAG,KAAT;;;qDAGKA,MAAM,KAAK,K;;;;;;;;AACnB;;;eAEK,aAAI+C,GAAJ,EAAe;;;;;;;;AAIR,yBAAM,KAAKD,OAAL,CAAa7D,GAAb,CAAiB8D,GAAjB,CAAN;;;AAAT/C,wB;;;;;;;;;qDAGKA,M;;;;;;;;AACR;;;eAED,gBAAO+C,GAAP,EAAoB;AAClB,eAAKD,OAAL,CAAaG,MAAb,CAAoBF,GAApB;AACD;;;eAED,iBAAQ;AACN,eAAKD,OAAL,CAAaI,KAAb;AACD;;;;;;;uBA/BUL,c,EAAc,8G;AAAA,K;;;aAAdA,c;AAAc,eAAdA,cAAc,K;AAAA,kBAFb;;;;;sEAEDA,c,EAAc;cAH1B,wDAG0B;eAHf;AACVD,oBAAU,EAAE;AADF,S;AAGe,Q","file":"default~contact-list-contact-list-module~details-details-module~edit-address-edit-address-module~edi~22cf7fc4-es5.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { defer, from, Observable, throwError } from 'rxjs';\nimport { concatMap, map, tap } from 'rxjs/operators';\nimport { StorageService } from 'src/app/storage.service';\nimport { environment } from 'src/environments/environment';\n\n/**\n * Manejo de empresas migradas.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class CompaniesService {\n  /**\n   * Listado de empresas migradas.\n   */\n  get companies() {\n    return (async () => {\n      if (!this._companies) {\n        await this.retrieveCompanies();\n      }\n\n      return this._companies;\n    })();\n  }\n\n  /**\n   * Listado de departamentos.\n   */\n  get departamentos() {\n    return (async () => await this.storageService.get('migrated_departamentos'))();\n  }\n\n  /**\n   * Listado de municipios.\n   */\n  get municipios() {\n    return (async () => await this.storageService.get('migrated_municipios'))();\n  }\n\n  /**\n   * Listado de tipos de vía.\n   */\n  get vias() {\n    return (async () => await this.storageService.get('migrated_vias'))();\n  }\n\n  /**\n   * Listado de tipos de cuadrante.\n   */\n  get cuadrantes() {\n    return (async () => await this.storageService.get('migrated_cuadrantes'))();\n  }\n\n  /**\n   * Listado de tipos de complemento.\n   */\n  get complementos() {\n    return (async () => await this.storageService.get('migrated_complementos'))();\n  }\n\n  /**\n   * Listado de tipos de barrio.\n   */\n  get barrios() {\n    return (async () => await this.storageService.get('migrated_barrios'))();\n  }\n\n  /**\n   * Listado de tipos de urbanización.\n   */\n  get urbanizaciones() {\n    return (async () => await this.storageService.get('migrated_urbanizaciones'))();\n  }\n\n  /**\n   * Listado de tipos de manzana.\n   */\n  get manzanas() {\n    return (async () => await this.storageService.get('migrated_manzanas'))();\n  }\n\n  /**\n   * Listado de tipos de predio.\n   */\n  get predios() {\n    return (async () => await this.storageService.get('migrated_predios'))();\n  }\n\n  /**\n   * Listado de empresas actualizadas.\n   */\n  get updatedCompanies() {\n    return (async () => {\n      if (!this._udpatedCompanies) {\n        await this.retrieveUpdatedCompanies();\n      }\n\n      return this._udpatedCompanies;\n    })();\n  }\n\n  /**\n   * Empresa que está siendo actualmente manipulada.\n   */\n  get company() {\n    return this._company;\n  }\n\n  /**\n   * Obtiene el responsable de la ARL (usuario actual).\n   */\n  get responsableARL() {\n    return (async () => {\n      return await this.storageService.get('sesion');\n    })();\n  }\n\n  /**\n   * Listado de empresas migradas.\n   */\n  private _companies: any[];\n\n  /**\n   * Listado de empresas actualizadas.\n   */\n  private _udpatedCompanies: any[];\n\n  /**\n   * Empresa que está siendo actualmente manipulada.\n   */\n  private _company: any;\n\n  constructor(\n    private http: HttpClient,\n    private storageService: StorageService\n  ) {}\n\n  /**\n   * Obtiene el listado de empresas migradas desde el servidor.\n   *\n   * Actualiza la lista del almacén de datos y regresa este valor.\n   *\n   * @param idUsuario Identificación del usuario por el cual filtrar las empresas.\n   */\n  fetchCompanies(idUsuario: number): Observable<any> {\n    const url = `${environment.API_LISTAR_EMPRESAS_MIGRADAS}?id_Usuario=${idUsuario}`;\n\n    return this.http.post(url, null).pipe(\n      concatMap((r: any) => defer(() => from(this.setCompanies(r)))),\n      map(r => {\n        if (r) {\n          return this._companies;\n        }\n\n        throw new Error('Full memory.');\n      })\n    );\n  }\n\n  /**\n   * Establece la empresa que se va a modificar. Se realiza una búsqueda de la empresa\n   * por el identificador proporcionado. Primero se realiza una búsqueda dentro\n   * del arreglo de empresas modificadas y, si no está presente, se busca en el arreglo\n   * de empresas migradas.\n   *\n   * _IMPORTANTE: Solo puede haber una empresa siendo modificada a la vez._\n   *\n   * @param id Identificador de la empresa.\n   */\n  async prepareCompany(id: number): Promise<any> {\n    if (this.company) {\n      throw new Error('Company already in place.');\n    }\n\n    let result = await this.updatedCompanies;\n    let company = result.find(r => r.Pk_Id_AS_004_Empresas_AMigrar === id);\n\n    if (!company) {\n      result = await this.companies;\n      company = result.find(r => r.Pk_Id_AS_004_Empresas_AMigrar === id);\n    }\n\n    this._company = JSON.parse(JSON.stringify(company));\n\n    return this.company;\n  }\n\n  /**\n   * Guarda en el almacén de datos los cambios hechos a la empresa actualmente en edición.\n   *\n   * Regresa verdadero si el proceso se realizó satisfactoriamente, y falso en caso de que\n   * no haya memoria en el dispositivo.\n   */\n  async saveChanges(): Promise<boolean> {\n    if (!this.company) {\n      throw new Error('No company set.');\n    }\n\n    const updatedCompanies = await this.updatedCompanies;\n    const index = updatedCompanies.findIndex(c => c.Pk_Id_AS_004_Empresas_AMigrar === this.company.Pk_Id_AS_004_Empresas_AMigrar);\n\n    if (index < 0) {\n      updatedCompanies.push(this.company);\n    } else {\n      updatedCompanies[index] = this.company;\n    }\n\n    const result = this.setUpdatedCompanies(updatedCompanies);\n\n    if (result) {\n      this.discardChanges();\n    }\n\n    return result;\n  }\n\n  /**\n   * Descarta los cambios que hayan actualmente en memoria.\n   *\n   * Este método no elimina los cambios que hayan sido previamente guardados en el almacén de\n   * datos.\n   */\n  discardChanges(): void {\n    this._company = undefined;\n  }\n\n  /**\n   * Envía los cambios de la empresa actualmente en edición al servidor para ser procesados.\n   */\n  save(): Observable<any> {\n    if (!this.company) {\n      throw new Error('No company set.');\n    }\n\n    const url = environment.API_GUARDAR_EMPRESA_MIGRADA;\n\n    console.log(\"LogDev save: \", JSON.stringify(url));\n    console.log(\"LogDev save: \", JSON.stringify(this.company).substr(0,4000));\n    console.log(\"LogDev save: \", JSON.stringify(this.company).substr(3999,4000));\n    console.log(\"LogDev save: \", JSON.stringify(this.company).substr(7998,4000));\n    console.log(\"LogDev save: \", JSON.stringify(this.company).substr(11997,4000));\n    console.log(\"LogDev save: \", JSON.stringify(this.company).substr(15996,4000));\n    console.log(\"LogDev save: \", JSON.stringify(this.company).substr(19995,4000));\n    console.log(\"LogDev save: \", JSON.stringify(this.company).substr(23994));\n    \n\n    return this.http.post(url, this.company).pipe(\n\n      tap(async (r: any) => {\n        const result = r.split(';')[0];\n\n        if (result !== 'true') {\n          return;\n        }\n\n        const indexC = (await this.companies).findIndex(\n          c => c.Pk_Id_AS_004_Empresas_AMigrar === this.company.Pk_Id_AS_004_Empresas_AMigrar\n        );\n        this._companies.splice(indexC, 1);\n        await this.setCompanies(this._companies);\n\n        const indexM = (await this.updatedCompanies).find(\n          m => m.Pk_Id_AS_004_Empresas_AMigrar === this.company.Pk_Id_AS_004_Empresas_AMigrar\n        );\n        this._udpatedCompanies.splice(indexM, 1);\n        await this.setUpdatedCompanies(this._udpatedCompanies);\n\n        this.discardChanges();\n      })\n    );\n  }\n\n  /**\n   * Obtiene el listado de empresas migradas desde el almacén de datos.\n   */\n  private async retrieveCompanies(): Promise<void> {\n    const result = await this.storageService.get('migrated_companies');\n    this._companies = result ? result : [];\n  }\n\n  /**\n   * Establece el listado de empresas migradas indicado en el almacén de datos.\n   *\n   * @param companies Listado de empresas migradas.\n   */\n  private async setCompanies(companies: any[]): Promise<boolean> {\n    const departamentos = companies[0]?.listDertamentos ?? [];\n    const municipios = companies[0]?.listMunicipios ?? [];\n    const vias = companies[0]?.eDListaMaestrosDirecciones?.listaMaestrosAvenida ?? [];\n    const cuadrantes = companies[0]?.eDListaMaestrosDirecciones?.listaMaestrosCuadrante ?? [];\n    const complementos = companies[0]?.eDListaMaestrosDirecciones?.listaMaestrosSufijos ?? [];\n    const barrios = companies[0]?.eDListaMaestrosDirecciones?.listaMaestrosBarrios ?? [];\n    const urbanizaciones = companies[0]?.eDListaMaestrosDirecciones?.listaMaestrosUrbanizacion ?? [];\n    const manzanas = companies[0]?.eDListaMaestrosDirecciones?.listaMaestrosManzana ?? [];\n    const predios = companies[0]?.eDListaMaestrosDirecciones?.listaMaestrosTipoDePredio ?? [];\n    delete companies[0]?.listDertamentos;\n    delete companies[0]?.listMunicipios;\n    delete companies[0]?.eDListaMaestrosDirecciones;\n    const result = await this.storageService.set('migrated_companies', companies);\n\n    if (departamentos.length) {\n      await this.storageService.set('migrated_departamentos', departamentos);\n    }\n\n    if (municipios.length) {\n      await this.storageService.set('migrated_municipios', municipios);\n    }\n\n    if (vias.length) {\n      await this.storageService.set('migrated_vias', vias);\n    }\n\n    if (cuadrantes.length) {\n      await this.storageService.set('migrated_cuadrantes', cuadrantes);\n    }\n\n    if (complementos.length) {\n      await this.storageService.set('migrated_complementos', complementos);\n    }\n\n    if (barrios.length) {\n      await this.storageService.set('migrated_barrios', barrios);\n    }\n\n    if (urbanizaciones.length) {\n      await this.storageService.set('migrated_urbanizaciones', urbanizaciones);\n    }\n\n    if (manzanas.length) {\n      await this.storageService.set('migrated_manzanas', manzanas);\n    }\n\n    if (predios.length) {\n      await this.storageService.set('migrated_predios', predios);\n    }\n\n    if (result) {\n      this._companies = companies;\n    }\n\n    return result;\n  }\n\n  /**\n   * Obtiene el listado de empresas actualizadas desde el almacén de datos.\n   */\n  private async retrieveUpdatedCompanies(): Promise<void> {\n    const result = await this.storageService.get('updated_companies');\n    this._udpatedCompanies = result ? result : [];\n  }\n\n  /**\n   * Establece el listado de empresas actualizadas indicado en el almacén de datos.\n   *\n   * @param companies Listado de empresas actualizadas.\n   */\n  private async setUpdatedCompanies(companies: any[]): Promise<boolean> {\n    const result = await this.storageService.set('updated_companies', companies);\n\n    if (result) {\n      this._udpatedCompanies = companies;\n    }\n\n    return result;\n  }\n}\n","import { Injectable } from '@angular/core';\r\nimport { Storage } from '@ionic/storage';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class StorageService {\r\n  constructor(private storage: Storage) {}\r\n\r\n  async set(key: string, value: any): Promise<boolean> {\r\n    let result: any;\r\n\r\n    try {\r\n      result = await this.storage.set(key, value);\r\n    } catch {\r\n      result = false;\r\n    }\r\n\r\n    return result !== false;\r\n  }\r\n\r\n  async get(key: string): Promise<any> {\r\n    let result: any;\r\n\r\n    try {\r\n      result = await this.storage.get(key);\r\n    } catch {}\r\n\r\n    return result;\r\n  }\r\n\r\n  remove(key: string) {\r\n    this.storage.remove(key);\r\n  }\r\n\r\n  clear() {\r\n    this.storage.clear();\r\n  }\r\n}\r\n"]}